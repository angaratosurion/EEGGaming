{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BrainWaveRecordManager.cs\par \pard\plain 
{\tc\tcl2 \v EEGGaming.Core/Managers/BrainWaveRecordManager.cs}
{\xe \v EEGGaming.Core/Managers/BrainWaveRecordManager.cs}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf17 using }NeuroSDK;\par
00002 {\cf17 using }NeuroTech.Spectrum;\par
00003 {\cf17 using }CsvHelper;\par
00004 {\cf17 using }System.Globalization;\par
00005 {\cf17 using }EEGGaming.Core.Tools;\par
00006 {\cf17 using }Neurotech.Filters;\par
00007 {\cf17 using }EEGGaming.Core.Data.NonDataModels;\par
00008 {\cf17 using }System.Drawing;\par
00009 {\cf17 using }EEGGaming.Core.Data.Models;\par
00010 {\cf17 using }NLog.LayoutRenderers.Wrappers;\par
00011 {\cf17 using }ScottPlot;\par
00012 {\cf17 using }System.Collections.Generic;\par
00013 {\cf17 using }System.Collections.Immutable;\par
00014 {\cf20 //using NLog.Filters;}\par
00015 \par
00016 {\cf17 namespace }EEGGaming.Core.Managers\par
00017 \{\par
00021     {\cf17 public} delegate {\cf18 void} OnBlinked();\par
00026     {\cf17 public}  {\cf17 class }BrainWaveRecordManager:BaseManager\par
00027     \{\par
00028        {\cf18 int} blinkcnt = 0;\par
00029        \par
00030        {\cf17 public} {\cf17 static} NeuroSDK.Scanner scanner = {\cf17 new} NeuroSDK.Scanner(SensorFamily.SensorLEBrainBit);\par
00034         {\cf17 public} List<BrainwavesRecord> Records \{ {\cf17 get}; {\cf17 set}; \}\par
00035         {\cf17 const} {\cf18 double} VOLTENERG = 0.0001;\par
00036         BrainBitSensor? sensor = {\cf17 null};\par
00037         SpectrumMath math;\par
00038         FilterList flist;{\cf20 //= new FilterList();}\par
00039         DateTime startedat;\par
00040         {\cf18 double} newalphaval, newavbgo1o2 = 0,newvalalpharel,totalbinpower;\par
00044         {\cf17 public} System.Timers.Timer tmrBlink \{ {\cf17 get}; {\cf17 set}; \}\par
00045 \par
00049         {\cf17 public} {\cf17 event} OnBlinked OnBlinked;\par
00053         {\cf17 public} {\cf18 int} SamplesRecorded \{ {\cf17 get}\{ {\cf19 return} Records.Count(); \} \}\par
00057         {\cf17 public} Boolean EnableFiltering \{ {\cf17 get}; {\cf17 set}; \}\par
00061         {\cf17 public} {\cf18 int} SamplingRate \{ {\cf17 get}; {\cf17 set}; \}\par
00065         {\cf17 public} {\cf18 int} FFtWindow \{ {\cf17 get}; {\cf17 set}; \}\par
00069         {\cf17 public} {\cf18 int} ProcessWinRate \{ {\cf17 get}; {\cf17 set}; \}\par
00073         {\cf17 public} {\cf18 double} FFTBinsFor1Hz \{ {\cf17 get}\par
00074             \{ {\cf19 return} math.GetFFTBinsFor1Hz(); \} \}\par
00078         {\cf17 public} BrainBitSensor ?Sensor \par
00079         \{ {\cf17 get} \{ {\cf19 return} sensor; \}\par
00080         \}\par
00084         {\cf17 public} Boolean Blinked \{ {\cf17 get}; {\cf17 set}; \}\par
00088         {\cf17 public} {\cf18 int} ActiveUserId \{ {\cf17 get}; {\cf17 set}; \}\par
00092         {\cf17 public} {\cf18 int} ActiveGamingSessionId \{ {\cf17 get}; {\cf17 set}; \}\par
00096         {\cf17 public} {\cf18 bool} UsesDb \{ {\cf17 get}; {\cf17 set}; \}\par
00097         \par
00098         {\cf17 public} BrainWaveRecordManager():base()\par
00099         \{\par
00100 \par
00101             {\cf19 try}\par
00102             \{\par
00103                 Records= {\cf17 new} List<BrainwavesRecord> ();\par
00104                 scanner.EventSensorsChanged += onDeviceFound;\par
00105                 scanner.Start();\par
00106                 SamplingRate = 250;{\cf20 // raw signal sampling frequency}\par
00107                 FFtWindow = 500;  {\cf20 // spectrum calculation window length}\par
00108                 ProcessWinRate = 5;{\cf20 // *4;//5; // spectrum calculation frequency}\par
00109                                    \par
00110                 tmrBlink = {\cf17 new} System.Timers.Timer(this.FFtWindow);\par
00111                \par
00112                 tmrBlink.Elapsed += TmrBlink_Elapsed;\par
00113                \par
00114             \}\par
00115             {\cf19 catch} (Exception ex)\par
00116             \{\par
00117 \par
00118                 CommonTools.ErrorReporting(ex);\par
00119 \par
00120             \}\par
00121 \par
00122 \par
00123 \par
00124         \}\par
00129         {\cf17 public} {\cf18 void} LoadCsv({\cf18 string} filename)\par
00130         \{\par
00131             {\cf19 try}\par
00132             \{\par
00133                 {\cf19 if} (filename != {\cf17 null} && File.Exists(filename))\par
00134                 \{\par
00135                     this.Records.Clear ();\par
00136                     {\cf17 using }var reader = {\cf17 new} StreamReader(filename);\par
00137                     {\cf17 using }var csv = {\cf17 new} CsvReader(reader, CultureInfo.CurrentCulture);\par
00138                     var recs = csv.GetRecords<BrainwavesRecord>().ToList();\par
00139                     Records.AddRange(recs);\par
00140                     reader.Close();\par
00141                     csv.Dispose();\par
00142 \par
00143                 \}\par
00144             \}\par
00145             {\cf19 catch} (Exception ex)\par
00146             \{\par
00147 \par
00148                 CommonTools.ErrorReporting(ex);\par
00149 \par
00150             \}\par
00151         \}\par
00156         {\cf17 public} {\cf18 void} MakeGraphs({\cf18 string} filename)\par
00157         \{\par
00158             {\cf19 try}\par
00159             \{\par
00160                 {\cf19 if} (filename != {\cf17 null} && Records != {\cf17 null} && Records.Count > 0)\par
00161                 \{\par
00162                     {\cf18 int} imagewidth = 4000, imageheight = 4000;\par
00163                     {\cf18 int} count = Records.Count;{\cf20 // * 2;}\par
00164                     {\cf18 double}[] alpha_avgch = {\cf17 new} {\cf18 double}[count];\par
00165                     {\cf18 double}[] beta_avgch = {\cf17 new} {\cf18 double}[count];\par
00166                     {\cf18 double}[] gamma_avgch = {\cf17 new} {\cf18 double}[count];\par
00167                     {\cf18 double}[] delta_avgch = {\cf17 new} {\cf18 double}[count];\par
00168                     {\cf18 double}[] theta_avgch = {\cf17 new} {\cf18 double}[count];\par
00169 \par
00170                     {\cf18 double}[] alpha_ch1 = {\cf17 new} {\cf18 double}[count];\par
00171                     {\cf18 double}[] beta_ch1 = {\cf17 new} {\cf18 double}[count];\par
00172                     {\cf18 double}[] gamma_ch1 = {\cf17 new} {\cf18 double}[count];\par
00173                     {\cf18 double}[] delta_ch1 = {\cf17 new} {\cf18 double}[count];\par
00174                     {\cf18 double}[] theta_ch1 = {\cf17 new} {\cf18 double}[count];\par
00175 \par
00176                     {\cf18 double}[] alpha_ch2 = {\cf17 new} {\cf18 double}[count];\par
00177                     {\cf18 double}[] beta_ch2 = {\cf17 new} {\cf18 double}[count];\par
00178                     {\cf18 double}[] gamma_ch2 = {\cf17 new} {\cf18 double}[count];\par
00179                     {\cf18 double}[] delta_ch2 = {\cf17 new} {\cf18 double}[count];\par
00180                     {\cf18 double}[] theta_ch2 = {\cf17 new} {\cf18 double}[count];\par
00181                     {\cf18 double}[] seconds= {\cf17 new} {\cf18 double}[count];\par
00182 \par
00183 \par
00184 \par
00185                     {\cf19 if} ((alpha_avgch != {\cf17 null} && beta_avgch != {\cf17 null} && gamma_avgch != {\cf17 null} && delta_avgch != {\cf17 null} \par
00186                         && theta_avgch != {\cf17 null}) && (alpha_ch1 != {\cf17 null} && beta_ch1 != {\cf17 null} && gamma_ch1 != {\cf17 null} && delta_ch1 != {\cf17 null}\par
00187                         && theta_ch1 != {\cf17 null}) \par
00188                         && (alpha_ch2 != {\cf17 null} && beta_ch2 != {\cf17 null} && gamma_ch2 != {\cf17 null} && delta_ch2 != {\cf17 null}\par
00189                         && theta_ch2 != {\cf17 null}))\par
00190                     \{\par
00191                         {\cf19 for} ({\cf18 int} i = 0; i < count; i++)\par
00192                         \{\par
00193                             alpha_avgch[i] = Records[i].Alpha1_avgch;\par
00194                             beta_avgch[i] = Records[i].Beta1_avgch;\par
00195                             gamma_avgch[i] = Records[i].Gamma1_avgch;\par
00196                             delta_avgch[i] = Records[i].Delta_avgch;\par
00197                             theta_avgch[i] = Records[i].Theta_avgch;\par
00198 \par
00199                             alpha_ch1[i] = Records[i].Alpha1_ch1;\par
00200                             beta_ch1[i] = Records[i].Beta1_ch1;\par
00201                             gamma_ch1[i] = Records[i].Gamma1_ch1;\par
00202                             delta_ch1[i] = Records[i].Delta_ch1;\par
00203                             theta_ch1[i] = Records[i].Theta_ch1;\par
00204 \par
00205                             alpha_ch2[i] = Records[i].Alpha1_ch2;\par
00206                             beta_ch2[i] = Records[i].Beta1_ch2;\par
00207                             gamma_ch2[i] = Records[i].Gamma1_ch2;\par
00208                             delta_ch2[i] = Records[i].Delta_ch2;\par
00209                             theta_ch2[i] = Records[i].Theta_ch2;\par
00210                             seconds[i] = Records[i].Second;\par
00211 \par
00212                         \}\par
00213 \par
00214 \par
00215                        \par
00216 \par
00217                         ScottPlot.Plot plt = {\cf17 new} ScottPlot.Plot();\par
00218                         plt.Add.ScatterLine(seconds, alpha_avgch, Colors.Blue);\par
00219                         plt.Add.ScatterLine(seconds, beta_avgch, Colors.Green);\par
00220                         plt.Add.ScatterLine(seconds, gamma_avgch, Colors.Red);\par
00221                         plt.Add.ScatterLine(seconds, delta_avgch, Colors.Orange);\par
00222                         plt.Add.ScatterLine(seconds, theta_avgch, Colors.Purple);\par
00223 \par
00224                         plt.Add.ScatterLine(seconds, alpha_ch1, Colors.AliceBlue);\par
00225                         plt.Add.ScatterLine(seconds, beta_ch1, Colors.GreenYellow);\par
00226                         plt.Add.ScatterLine(seconds, gamma_ch1, Colors.DarkRed);\par
00227                         plt.Add.ScatterLine(seconds, delta_ch1, Colors.OliveDrab);\par
00228                         plt.Add.ScatterLine(seconds, theta_ch1, Colors.RebeccaPurple);\par
00229 \par
00230                         plt.Add.ScatterLine(seconds, alpha_ch2, Colors.BlueViolet);\par
00231                         plt.Add.ScatterLine(seconds, beta_ch2, Colors.DarkGreen);\par
00232                         plt.Add.ScatterLine(seconds, gamma_ch2, Colors.IndianRed);\par
00233                         plt.Add.ScatterLine(seconds, delta_ch2, Colors.DarkOrange);\par
00234                         plt.Add.ScatterLine(seconds, theta_ch2, Colors.MediumPurple);\par
00235 \par
00236                         LegendItem item_alpha_avgch = {\cf17 new} LegendItem();\par
00237                         item_alpha_avgch.LabelText = {\cf22 "Average  Raw Alpha Value of the 2 channels "};\par
00238                         item_alpha_avgch.FillColor = Colors.Blue;\par
00239                         LegendItem item_beta_avgch = {\cf17 new} LegendItem();\par
00240                         item_beta_avgch.LabelText = {\cf22 "Average  Raw Beta Value of the 2 channels "};\par
00241                         item_beta_avgch.FillColor = Colors.Green;\par
00242                         LegendItem item_gamma_avgch = {\cf17 new} LegendItem();\par
00243                         item_gamma_avgch.LabelText = {\cf22 "Average  Raw Gamma Value of the 2 channels "};\par
00244                         item_gamma_avgch.FillColor = Colors.Red;\par
00245                         LegendItem item_delta_avgch = {\cf17 new} LegendItem();\par
00246                         item_delta_avgch.LabelText = {\cf22 "Average  Raw Delta Value of the 2 channels "};\par
00247                         item_delta_avgch.FillColor = Colors.Orange;\par
00248                         LegendItem item_theta_avgch = {\cf17 new} LegendItem();\par
00249                         item_theta_avgch.LabelText = {\cf22 "Average  Raw Theta Value of the 2 channels "};\par
00250                         item_theta_avgch.FillColor = Colors.Purple;\par
00251 \par
00252                         LegendItem item_alpha_ch1 = {\cf17 new} LegendItem();\par
00253                         item_alpha_ch1.LabelText = {\cf22 " Raw Alpha Value of Channel 1 "};\par
00254                         item_alpha_ch1.FillColor = Colors.AliceBlue;\par
00255                         LegendItem item_beta_ch1 = {\cf17 new} LegendItem();\par
00256                         item_beta_ch1.LabelText = {\cf22 "Raw Beta Value of Channel 1 "};\par
00257                         item_beta_ch1.FillColor = Colors.GreenYellow;\par
00258                         LegendItem item_gamma_ch1 = {\cf17 new} LegendItem();\par
00259                         item_gamma_ch1.LabelText = {\cf22 "Raw Gamma Value of Channel 1 "};\par
00260                         item_gamma_ch1.FillColor = Colors.DarkRed;\par
00261                         LegendItem item_delta_ch1 = {\cf17 new} LegendItem();\par
00262                         item_delta_ch1.LabelText = {\cf22 "Raw Delta Value of Channel 1 "};\par
00263                         item_delta_ch1.FillColor = Colors.OliveDrab;\par
00264                         LegendItem item_theta_ch1 = {\cf17 new} LegendItem();\par
00265                         item_theta_ch1.LabelText = {\cf22 "Raw Theta Value of Channel 1 "};\par
00266                         item_theta_ch1.FillColor = Colors.RebeccaPurple;\par
00267 \par
00268                         LegendItem item_alpha_ch2 = {\cf17 new} LegendItem();\par
00269                         item_alpha_ch2.LabelText = {\cf22 " Raw Alpha Value of Channel 2 "};\par
00270                         item_alpha_ch2.FillColor = Colors.BlueViolet;\par
00271                         LegendItem item_beta_ch2 = {\cf17 new} LegendItem();\par
00272                         item_beta_ch2.LabelText = {\cf22 "Raw Beta Value of Channel 2 "};\par
00273                         item_beta_ch2.FillColor = Colors.DarkGreen;\par
00274                         LegendItem item_gamma_ch2 = {\cf17 new} LegendItem();\par
00275                         item_gamma_ch2.LabelText = {\cf22 "Raw Gamma Value of Channel 2 "};\par
00276                         item_gamma_ch2.FillColor = Colors.IndianRed;\par
00277                         LegendItem item_delta_ch2 = {\cf17 new} LegendItem();\par
00278                         item_delta_ch2.LabelText = {\cf22 "Raw Delta Value of Channel 2 "};\par
00279                         item_delta_ch2.FillColor = Colors.DarkOrange;\par
00280                         LegendItem item_theta_ch2 = {\cf17 new} LegendItem();\par
00281                         item_theta_ch2.LabelText = {\cf22 "Raw Theta Value of Channel 2 "};\par
00282                         item_theta_ch2.FillColor = Colors.MediumPurple;\par
00283                         LegendItem[] legitem = \{ item_alpha_avgch, item_beta_avgch, item_gamma_avgch, item_delta_avgch, item_theta_avgch,\par
00284                          item_alpha_ch1 , item_beta_ch1 , item_gamma_ch1 , item_delta_ch1 , item_theta_ch1 ,\par
00285                             item_alpha_ch2 , item_beta_ch2 , item_gamma_ch2 , item_delta_ch2 , item_theta_ch2 \};\par
00286                         plt.ShowLegend(legitem);\par
00287 \par
00288                         plt.YLabel({\cf22 "Amplitude (V)"});\par
00289                         plt.XLabel({\cf22 "Seconds"});\par
00290                         {\cf20 // plt.XLabel("Frequency (Hz)");}\par
00291                         plt.ShowLegend();\par
00292                         {\cf18 string} tfilname = Path.Combine(Path.GetDirectoryName(filename), Path.GetFileNameWithoutExtension(filename));\par
00293                         plt.SaveJpeg(tfilname + {\cf22 "-Amplitude (V).jpg"}, imagewidth, imageheight, 95);\par
00294                         plt.Dispose();\par
00295 \par
00296                         plt = {\cf17 new} ScottPlot.Plot();\par
00297                         plt.Add.ScatterLine(seconds, alpha_avgch, Colors.Blue);\par
00298 \par
00299                         plt.Add.ScatterLine(seconds, alpha_ch1, Colors.AliceBlue);\par
00300 \par
00301                         plt.Add.ScatterLine(seconds, alpha_ch2, Colors.BlueViolet);\par
00302 \par
00303                         legitem = {\cf17 null};\par
00304 \par
00305                         {\cf20 // legitem = \{item_alpha_avgch,item_alpha_ch1,item_alpha_ch2\};}\par
00306                         legitem = {\cf17 new} LegendItem[3];\par
00307                         legitem[0] = item_alpha_avgch;\par
00308                         legitem[1] = item_alpha_ch1;\par
00309                         legitem[2] = item_alpha_ch2;\par
00310 \par
00311                         plt.ShowLegend(legitem);\par
00312 \par
00313                         plt.YLabel({\cf22 "Amplitude (V)"});\par
00314                         plt.XLabel({\cf22 "Seconds"});\par
00315                         plt.ShowLegend();\par
00316                         tfilname = Path.Combine(Path.GetDirectoryName(filename), Path.GetFileNameWithoutExtension(filename));\par
00317                         plt.SaveJpeg(tfilname + {\cf22 "-Amplitude (V)-onlylphawave.jpg"}, imagewidth, imageheight, 95);\par
00318                         plt.Dispose();\par
00319                       \par
00320 \par
00321                         \par
00322 \par
00323 \par
00324 \par
00325                     \}\par
00326                 \}\par
00327             \}\par
00328             {\cf19 catch} (Exception ex)\par
00329             \{\par
00330 \par
00331                 CommonTools.ErrorReporting(ex);\par
00332 \par
00333             \}\par
00334         \}\par
00339         {\cf17 public} {\cf18 void} Connect(SensorInfo sens)\par
00340         \{\par
00341             {\cf19 try}\par
00342             \{\par
00343                 \par
00344                     sensor = scanner.CreateSensor(sens) as BrainBitSensor;\par
00345               \par
00346 \par
00347                   sensor.EventBrainBitSignalDataRecived += onBrainBitSignalDataRecived;\par
00348                \par
00349 \par
00350 \par
00351             \}\par
00352             {\cf19 catch} (Exception ex )\par
00353             \{\par
00354 \par
00355                 CommonTools.ErrorReporting(ex);\par
00356             \}\par
00357         \}\par
00358 \par
00362         {\cf17 public} {\cf18 void} Start ()\par
00363         \{\par
00364             {\cf19 try}\par
00365             \{\par
00366                \par
00367                 \{\par
00368                     \par
00369                     {\cf19 while}  (sensor == {\cf17 null} && scanner.Sensors.Count==0 \par
00370                        )\par
00371                     \{\par
00372                       \par
00373                        scanner.Start();\par
00374                         Thread.Sleep(15000 );\par
00375                         \par
00376                         this.Connect(scanner.Sensors[0]);\par
00377                        \par
00378                     \}\par
00379                  \par
00380                     {\cf19 if} (EnableFiltering)\par
00381                     \{\par
00382                         this.InitFiltering();\par
00383                     \}\par
00384                     math = {\cf17 new} SpectrumMath(SamplingRate, FFtWindow, ProcessWinRate);\par
00385                     sensor.ExecCommand(SensorCommand.CommandStartSignal);\par
00386                     \par
00387                     Records.Clear();\par
00388                    \par
00389                     startedat = DateTime.Now;\par
00390 \par
00391                      tmrBlink.Start();\par
00392                    \par
00393                     \par
00394                     {\cf19 if} (( this.ActiveUserId != 0 && this.ActiveGamingSessionId != 0) &&(this.UsesDb=={\cf17 true}))\par
00395                     \{\par
00396                        \par
00397                         this.AddNewRange(Records.ToArray());\par
00398                         \par
00399                     \}\par
00400                     \par
00401                    \par
00402 \par
00403 \par
00404 \par
00405                 \}\par
00406 \par
00407 \par
00408 \par
00409             \}\par
00410             {\cf19 catch} (Exception ex)\par
00411             \{\par
00412                 {\cf19 throw};\par
00413 \par
00414                 CommonTools.ErrorReporting(ex);\par
00415             \}\par
00416         \}\par
00420 \par
00421         {\cf17 public} {\cf18 void} Stop()\par
00422         \{\par
00423             {\cf19 try}\par
00424             \{\par
00425                 {\cf19 if} (sensor != {\cf17 null})\par
00426                 \{\par
00427                     \par
00428                    {\cf20 // var f =Records[0];}\par
00429                     sensor.Disconnect();\par
00430                     sensor.ExecCommand(SensorCommand.CommandStopSignal);\par
00431 \par
00432                     sensor.Dispose();\par
00433                     sensor = {\cf17 null};\par
00434                     math.ClearData();\par
00435                     {\cf19 if} (flist != {\cf17 null})\par
00436                     \{\par
00437                         flist.Dispose();\par
00438                     \}\par
00439                 \}\par
00440                 \par
00441             \}\par
00442             {\cf19 catch} (Exception ex)\par
00443             \{\par
00444 \par
00445                 CommonTools.ErrorReporting(ex);\par
00446             \}\par
00447         \}\par
00451         {\cf17 public} {\cf18 void} StopAndSavetoDatabse()\par
00452         \{\par
00453             {\cf19 try}\par
00454             \{\par
00455                 {\cf19 if} (sensor != {\cf17 null})\par
00456                 \{\par
00457  \par
00458                     sensor.Disconnect();\par
00459                     sensor.ExecCommand(SensorCommand.CommandStopSignal);\par
00460 \par
00461                     sensor.Dispose();\par
00462                     sensor = {\cf17 null};\par
00463                     math.ClearData();\par
00464                     {\cf19 if} (flist != {\cf17 null})\par
00465                     \{\par
00466                         flist.Dispose();\par
00467                     \}\par
00468                     \par
00469                     SavetoDatabse();\par
00470                 \}\par
00471 \par
00472             \}\par
00473             {\cf19 catch} (Exception ex)\par
00474             \{\par
00475 \par
00476                 CommonTools.ErrorReporting(ex);\par
00477             \}\par
00478         \}\par
00482         {\cf17 public} async {\cf18 void} SavetoDatabse()\par
00483         \{\par
00484             {\cf19 try}\par
00485             \{\par
00486                \par
00487 \par
00488                     \par
00489                     \par
00490                    {\cf20 // if (Records != null && this.ActiveGamingSessionId != 0 && this.ActiveUserId != 0)}\par
00491                     \{\par
00492                         {\cf19 foreach} (var rec {\cf19 in}  Records)\par
00493                         \{\par
00494                             rec.GamingSessionId = this.ActiveGamingSessionId;\par
00495                             rec.UserId = ActiveUserId;\par
00496 \par
00497                         \}\par
00498                         var recs = Records.ToArray();\par
00499 \par
00500                         await this.AddNewRange(recs);\par
00501                     \}\par
00502                 \par
00503             \}\par
00504             {\cf19 catch} (Exception ex)\par
00505             \{\par
00506                 {\cf19 throw};\par
00507                  \par
00508                  CommonTools.ErrorReporting(ex);\par
00509             \}\par
00510         \}\par
00515         {\cf17 public}  {\cf18 void} SaveToCSV({\cf18 string} filename)\par
00516         \{\par
00517             {\cf19 try}\par
00518             \{\par
00519                 {\cf19 if} (filename != {\cf17 null})\par
00520                 \{\par
00521                     {\cf17 using }var writer = {\cf17 new} StreamWriter(filename);\par
00522                     {\cf17 using }var csv = {\cf17 new} CsvWriter(writer, CultureInfo.CurrentCulture);\par
00523                     \par
00524                     csv.WriteHeader<BrainwavesRecord>();\par
00525                     csv.NextRecord();\par
00526                     {\cf19 foreach} (var rec {\cf19 in} Records)\par
00527                     \{\par
00528                         csv.WriteRecord(rec);\par
00529                         csv.NextRecord();\par
00530                     \}\par
00531                     csv.Flush();\par
00532                     writer.Flush();\par
00533                   \par
00534 \par
00535                 \}\par
00536             \}\par
00537             {\cf19 catch} (Exception ex)\par
00538             \{\par
00539 \par
00540                 CommonTools.ErrorReporting(ex);\par
00541             \}\par
00542         \}\par
00548      {\cf18 void} onDeviceFound(NeuroSDK.IScanner scanner, IReadOnlyList<SensorInfo> sensors)\par
00549         \{\par
00550             {\cf19 try}\par
00551             \{\par
00552                 {\cf19 if} (sensors != {\cf17 null})\par
00553                 \{\par
00554                     this.Connect(sensors[0]);\par
00555                     scanner.Stop();\par
00556                 \}\par
00557             \}\par
00558             {\cf19 catch} (Exception ex)\par
00559             \{\par
00560 \par
00561                 CommonTools.ErrorReporting(ex);\par
00562             \}\par
00563         \}\par
00569         {\cf17 private} {\cf18 void} onBrainBitSignalDataRecived(ISensor sensor, BrainBitSignalData[] data)\par
00570         \{\par
00571             {\cf19 try}\par
00572             \{\par
00573 \par
00574 \par
00575                 {\cf20 //  Console.WriteLine("Data: " + data);}\par
00576                {\cf20 // double[] vals = new double[data.Length * 4];}\par
00577                 {\cf18 double}[] vals  = {\cf17 new} {\cf18 double}[data.Length];\par
00578                 {\cf18 double}[] vals1 = {\cf17 new} {\cf18 double}[data.Length];\par
00579                 {\cf18 double}[] vals2 = {\cf17 new} {\cf18 double}[data.Length];\par
00580                 {\cf20 //double[]  fvals = new double[data.Length];}\par
00581                 BrainwavesRecord record = {\cf17 new} BrainwavesRecord();\par
00582                 TimeSpan secs = DateTime.Now.Subtract(startedat);\par
00583                \par
00584             \par
00585                {\cf20 // this.bitdata.Clear();}\par
00586                 {\cf19 for} ({\cf18 int} i = 0; i < data.Length; i++)\par
00587                 \{\par
00588                    \par
00589                     vals1[i] = data[i ].O1-data[1].T3;\par
00590                    \par
00591                     record.Marker = data[i].Marker;\par
00592                     record.PackNumber = data[i].PackNum;\par
00593                     \par
00594                     \par
00595                     \par
00596                     \par
00597 \par
00598 \par
00599                 \}\par
00600                 {\cf19 for} ({\cf18 int} i = 0; i < data.Length; i++)\par
00601                 \{\par
00602 \par
00603 \par
00604                     vals2[i] = data[i].O2 - data[i].T4;\par
00605 \par
00606 \par
00607 \par
00608 \par
00609                 \}\par
00610                 {\cf19 for} ({\cf18 int} i = 0; i < data.Length; i++)\par
00611                 \{\par
00612 \par
00613                     {\cf18 double}[] vals3 = {\cf17 new} {\cf18 double}[2];\par
00614                     vals3[0] = vals1[i];\par
00615                     vals3[1] = vals2[i];\par
00616 \par
00617                     {\cf20 //vals[i] =Calculations.AverageAbs(vals3);}\par
00618                     vals[i] = Calculations.Average(vals3);\par
00619 \par
00620 \par
00621 \par
00622 \par
00623                 \}\par
00624 \par
00625                 this.FilterArrayInPlace(vals);\par
00626                 this.FilterArrayInPlace(vals1);\par
00627                 this.FilterArrayInPlace(vals2);\par
00628 \par
00629 \par
00630                 math.ComputeSpectrum(vals);\par
00631 \par
00632                 WavesSpectrumData freq = math.ReadWavesSpectrumInfo();\par
00633                 math.ComputeSpectrum(vals1);\par
00634                 WavesSpectrumData freq1  =math.ReadWavesSpectrumInfo();\par
00635                 math.ComputeSpectrum(vals2);\par
00636                 WavesSpectrumData freq2 = math.ReadWavesSpectrumInfo();\par
00637 \par
00638 \par
00639 \par
00640 \par
00641                 {\cf19 if} ((freq.Alpha_Raw != 0.0 && freq.BetaRaw != 0.0 && freq.GammaRaw != 0.0\par
00642                      && freq.DeltaRaw != 0 && freq.ThetaRaw != 0.0) && (freq1.Alpha_Raw != 0.0 && freq1.BetaRaw != 0.0 && freq1.GammaRaw != 0.0\par
00643                      && freq1.DeltaRaw != 0 && freq1.ThetaRaw != 0.0) &&(freq2.Alpha_Raw != 0.0 && freq2.BetaRaw != 0.0 && freq2.GammaRaw != 0.0\par
00644                      && freq2.DeltaRaw != 0 && freq2.ThetaRaw != 0.0))\par
00645                 \{\par
00646                     newalphaval = freq.Alpha_Raw;{\cf20 //*100000;}\par
00647                     newvalalpharel = freq.Alpha_Rel;\par
00648 \par
00649                     record.Alpha1_avgch = freq.Alpha_Raw;\par
00650                     record.Beta1_avgch = freq.BetaRaw;\par
00651                     record.Gamma1_avgch = freq.GammaRaw;\par
00652                     record.Delta_avgch = freq.DeltaRaw;\par
00653                     record.Theta_avgch = freq.ThetaRaw;\par
00654                     \par
00655                     record.Alpha1_Rel_avgch = freq.Alpha_Rel;\par
00656                     record.Beta1_Rel_avgch = freq.BetaRel;\par
00657                     record.Gamma1_Rel_avgch = freq.GammaRel;\par
00658                     record.Delta_Rel_avgch = freq.DeltaRel;\par
00659                     record.Theta_Rel_avgch = freq.ThetaRel;\par
00660 \par
00661                     record.Alpha1_ch1 = freq1.Alpha_Raw;\par
00662                     record.Beta1_ch1 = freq1.BetaRaw;\par
00663                     record.Gamma1_ch1 = freq1.GammaRaw;\par
00664                     record.Delta_ch1 = freq1.DeltaRaw;\par
00665                     record.Theta_ch1 = freq1.ThetaRaw;\par
00666 \par
00667                     record.Alpha1_Rel_ch1 = freq2.Alpha_Rel;\par
00668                     record.Beta1_Rel_ch1 = freq2.BetaRel;\par
00669                     record.Gamma1_Rel_ch1 = freq2.GammaRel;\par
00670                     record.Delta_Rel_ch1 = freq2.DeltaRel;\par
00671                     record.Theta_Rel_ch1 = freq2.ThetaRel;\par
00672 \par
00673                     record.Alpha1_ch2 = freq2.Alpha_Raw;\par
00674                     record.Beta1_ch2 = freq2.BetaRaw;\par
00675                     record.Gamma1_ch2 = freq2.GammaRaw;\par
00676                     record.Delta_ch2 = freq2.DeltaRaw;\par
00677                     record.Theta_ch2 = freq2.ThetaRaw;\par
00678 \par
00679                     record.Alpha1_Rel_ch2 = freq2.Alpha_Rel;\par
00680                     record.Beta1_Rel_ch2 = freq2.BetaRel;\par
00681                     record.Gamma1_Rel_ch2 = freq2.GammaRel;\par
00682                     record.Delta_Rel_ch2 = freq2.DeltaRel;\par
00683                     record.Theta_Rel_ch2 = freq2.ThetaRel;\par
00684 \par
00685                     record.GamingSessionId = this.ActiveGamingSessionId;\par
00686                     record.UserId = this.ActiveUserId;\par
00687                     record.Date = DateTime.Now.ToShortDateString();\par
00688                     record.Time = DateTime.Now.ToLongTimeString();\par
00689                     record.Second = secs.TotalSeconds;\par
00690                     record.MiliSecond = secs.TotalMilliseconds;\par
00691                     record.Blinked = Blinked;\par
00692 \par
00693 \par
00694 \par
00695 \par
00696                     Blinked = {\cf17 false};\par
00697                     Records.Add(record);\par
00698                    {\cf20 // this.DetectBlink();}\par
00699 \par
00700 \par
00701                     {\cf20 //  this.bitdata.Add(voltagesNodes);}\par
00702                 \}\par
00703 \par
00704 \par
00705 \par
00706 \par
00707 \par
00708             \}\par
00709             {\cf19 catch} (Exception ex)\par
00710             \{\par
00711 \par
00712                 CommonTools.ErrorReporting(ex);\par
00713             \}\par
00714 \par
00715         \}\par
00716        \par
00722         {\cf17 private} {\cf18 void} TmrBlink_Elapsed({\cf18 object}? sender, System.Timers.ElapsedEventArgs e)\par
00723         \{\par
00724             {\cf19 try}\par
00725             \{\par
00726                \par
00727                 this.DetectBlink();\par
00728             \}\par
00729             {\cf19 catch} (Exception ex)\par
00730             \{\par
00731 \par
00732                 CommonTools.ErrorReporting(ex);\par
00733             \}\par
00734         \}\par
00739         {\cf17 public} {\cf18 void} FilterArrayInPlace( {\cf18 double}[] vals)\par
00740         \{\par
00741             {\cf19 try}\par
00742             \{\par
00743                 {\cf19 if}( vals !={\cf17 null} && EnableFiltering)\par
00744                 \{ \par
00745                         {\cf19 if} (flist == {\cf17 null})\par
00746                         \{\par
00747                             this.InitFiltering();\par
00748                         \}\par
00749                         flist.FilterArray(vals);\par
00750                    \par
00751                 \}\par
00752             \}\par
00753             {\cf19 catch} (Exception ex)\par
00754             \{\par
00755 \par
00756                 CommonTools.ErrorReporting(ex);\par
00757             \}\par
00758         \}\par
00762         {\cf17 public} {\cf18 void} InitFiltering()\par
00763         \{\par
00764             {\cf19 try}\par
00765             \{\par
00766                  flist = {\cf17 new} FilterList();\par
00767                 IIRFilterParam[] preinstallFilters = PreinstalledFilters.List();\par
00768               \par
00769              \par
00770                 IIRFilterParam filterparam50hzbs = preinstallFilters.FirstOrDefault(x => x.cutoffFreq == 50 && x.type == IIRFilterType.FtBandStop \par
00771                 && x.samplingFreq == SamplingRate);\par
00772                 IIRFilterParam filterparam60hzbs = preinstallFilters.FirstOrDefault(x => x.cutoffFreq == 60 && x.type == IIRFilterType.FtBandStop \par
00773                 && x.samplingFreq == SamplingRate);\par
00774 \par
00775 \par
00776                 IIRFilter reymastin50hzBS = {\cf17 new} IIRFilter(filterparam50hzbs);\par
00777                 IIRFilter reymastin60hzBS = {\cf17 new} IIRFilter(filterparam60hzbs);\par
00778 \par
00779 \par
00780 \par
00781 \par
00782 \par
00783 \par
00784 \par
00785                 flist.AddFilter(reymastin50hzBS);\par
00786                 flist.AddFilter(reymastin60hzBS);\par
00787 \par
00788             \}\par
00789             {\cf19 catch} (Exception ex)\par
00790             \{\par
00791 \par
00792                 CommonTools.ErrorReporting(ex);\par
00793             \}\par
00794         \}\par
00799         {\cf17 public} Boolean DetectBlink()\par
00800         \{\par
00801             {\cf19 try}\par
00802             \{\par
00803                 Boolean ap = {\cf17 false};\par
00804                 {\cf18 double}[] oldval = {\cf17 new} {\cf18 double}[Records.Count];\par
00805                 {\cf18 double}[] chn1val = {\cf17 new} {\cf18 double}[Records.Count];\par
00806               \par
00807                 {\cf19 if} (Records.Count > 0)\par
00808                 \{\par
00809                     {\cf19 for} ({\cf18 int} i = 0; i < this.Records.Count; i++)\par
00810                     \{\par
00811                         oldval[i] = this.Records[i].Alpha1_avgch;\par
00812                     \}\par
00813                     {\cf19 for} ({\cf18 int} i = 0; i < this.Records.Count; i++)\par
00814                     \{\par
00815                         chn1val[i] = this.Records[i].Alpha1_ch1;\par
00816                     \}\par
00817                    \par
00818                     {\cf19 if} (this.DetectBlinkusingAlpha(oldval, chn1val))\par
00819                     \{\par
00820                          blinkcnt++;\par
00821                         \par
00822 \par
00823                     \}\par
00824                    {\cf19 if} (blinkcnt > 2){\cf20 //(blinkcnt > 3)}\par
00825                         \{\par
00826 \par
00827                         Blinked = {\cf17 true};\par
00828                         Records[Records.Count-1].Blinked = {\cf17 true};\par
00829                         OnBlinked?.Invoke();\par
00830                         ap = {\cf17 true};\par
00831                         blinkcnt = 0;\par
00832 \par
00833                     \}\par
00834 \par
00835 \par
00836 \par
00837 \par
00838 \par
00839                 \}\par
00840                 {\cf19 return} ap;\par
00841             \}\par
00842             {\cf19 catch} (Exception ex)\par
00843             \{\par
00844 \par
00845                 CommonTools.ErrorReporting(ex);\par
00846                 {\cf19 return} {\cf17 false};\par
00847             \}\par
00848         \}\par
00855         {\cf17 public} Boolean DetectBlinkusingAlpha({\cf18 double}[] oldvals, {\cf18 double} [] chanel1vals)\par
00856         \{\par
00857             {\cf19 try}\par
00858             \{\par
00859                 Boolean ap = {\cf17 false};\par
00860             \par
00861                 {\cf19 for} ({\cf18 int} i = 0; i < oldvals.Length; i++)\par
00862                 \{\par
00863                     {\cf19 if} (((Calculations.Subtruck(Calculations.AverageAbs(oldvals), oldvals[i]) > VOLTENERG) \par
00864                         && (oldvals[i] > VOLTENERG))&&\par
00865                         ((Calculations.Subtruck(Calculations.AverageAbs(chanel1vals), chanel1vals[i]) > VOLTENERG)\par
00866                         && (chanel1vals[i] > VOLTENERG))) \par
00867                     \{\par
00868                         ap = {\cf17 true};\par
00869                     \}\par
00870                 \}\par
00871 \par
00872 \par
00873 \par
00874                 {\cf19 return} ap;\par
00875             \}\par
00876             {\cf19 catch} (Exception ex)\par
00877             \{\par
00878 \par
00879                 CommonTools.ErrorReporting(ex);\par
00880                 {\cf19 return} {\cf17 false};\par
00881             \}\par
00882         \}\par
00887         {\cf17 public} {\cf18 void} AddNew(BrainwavesRecord record)\par
00888         \{\par
00889             {\cf19 try}\par
00890             \{\par
00891                 {\cf19 if} (record != {\cf17 null})\par
00892                 \{\par
00893                     record.Id = PredictLastId({\cf22 "BrainwavesRecord"}) + 1;\par
00894                     DbContext.BrainWaves.Add(record);\par
00895                     DbContext.SaveChangesAsync();\par
00896                 \}\par
00897 \par
00898             \}\par
00899             {\cf19 catch} (Exception ex)\par
00900             \{\par
00901                 {\cf19 throw};\par
00902 \par
00903                 CommonTools.ErrorReporting(ex);\par
00904 \par
00905             \}\par
00906 \par
00907         \}\par
00912         \par
00913         {\cf17 public} async  Task AddNewRange(BrainwavesRecord[] record)\par
00914         \{\par
00915             {\cf19 try}\par
00916             \{\par
00917                 {\cf19 if} (record != {\cf17 null})\par
00918                 \{\par
00919                      \par
00920 \par
00921                     {\cf19 foreach} (var record2 {\cf19 in} record)\par
00922                     \{\par
00923                         record2.Id = PredictLastId({\cf22 "BrainwavesRecord"}) + 1;\par
00924                         \par
00925 \par
00926                     \}\par
00927                    await  DbContext.BrainWaves.AddRangeAsync(record);\par
00928                    await  DbContext.SaveChangesAsync();\par
00929                 \}\par
00930 \par
00931             \}\par
00932             {\cf19 catch} (Exception ex)\par
00933             \{\par
00934                 {\cf19 throw};\par
00935 \par
00936                 CommonTools.ErrorReporting(ex);\par
00937 \par
00938             \}\par
00939 \par
00940         \}\par
00946         {\cf17 public} {\cf18 void} Edit ({\cf18 int} {\cf18 id} ,BrainwavesRecord record)\par
00947         \{\par
00948             {\cf19 try}\par
00949             \{\par
00950                 {\cf19 if} (record != {\cf17 null} && {\cf18 id} > 0)\par
00951                 \{\par
00952                     var oldrec = this.GetBrainwaveFromDBById({\cf18 id});\par
00953                     {\cf19 if} (oldrec != {\cf17 null})\par
00954                     \{\par
00955                         record.Id = oldrec.Id;\par
00956                         DbContext.Entry(oldrec).CurrentValues.SetValues(record);\par
00957                         DbContext.SaveChanges();\par
00958                     \}\par
00959                 \}\par
00960             \}\par
00961             {\cf19 catch} (Exception ex)\par
00962             \{\par
00963                 {\cf19 throw};\par
00964 \par
00965                 CommonTools.ErrorReporting(ex);\par
00966 \par
00967             \}\par
00968         \}\par
00974         {\cf17 public} {\cf18 void} EditRange(   BrainwavesRecord []  records)\par
00975         \{\par
00976             {\cf19 try}\par
00977             \{\par
00978 \par
00979                 {\cf19 if} (records != {\cf17 null}  )\par
00980                 \{\par
00981                     {\cf19 foreach} (var record {\cf19 in} records)\par
00982                     \{\par
00983                         var oldrec = this.GetBrainwaveFromDBById(record.Id);\par
00984                         {\cf19 if} (oldrec != {\cf17 null})\par
00985                         \{\par
00986                             record.Id = oldrec.Id;\par
00987                             DbContext.Entry(oldrec).CurrentValues.SetValues(record);\par
00988                            \par
00989                         \}\par
00990                     \}\par
00991                     DbContext.SaveChanges();\par
00992                 \}\par
00993             \}\par
00994             {\cf19 catch} (Exception ex)\par
00995             \{\par
00996                 {\cf19 throw};\par
00997 \par
00998                 CommonTools.ErrorReporting(ex);\par
00999 \par
01000             \}\par
01001         \}\par
01006         {\cf17 public} List<BrainwavesRecord> GetBrainwavesFromDB()\par
01007         \{\par
01008             {\cf19 try}\par
01009             \{\par
01010                 {\cf19 return} this.DbContext.BrainWaves.ToList();\par
01011 \par
01012             \}\par
01013             {\cf19 catch} (Exception ex)\par
01014             \{\par
01015 \par
01016                 CommonTools.ErrorReporting(ex);\par
01017                 {\cf19 return} {\cf17 null};\par
01018             \}\par
01019 \par
01020         \}\par
01027         {\cf17 public} List<BrainwavesRecord> GetBrainwavesFromDBByUserId({\cf18 int} {\cf18 id})\par
01028         \{\par
01029             {\cf19 try}\par
01030             \{\par
01031                 List<BrainwavesRecord> ap;\par
01032 \par
01033                  \par
01034                     var tap = this.GetBrainwavesFromDB();\par
01035                      \par
01036                     ap = tap.FindAll(x => x.UserId == {\cf18 id});\par
01037 \par
01038 \par
01039 \par
01040                 {\cf19 return} ap;\par
01041 \par
01042             \}\par
01043             {\cf19 catch} (Exception ex)\par
01044             \{\par
01045 \par
01046                 CommonTools.ErrorReporting(ex);\par
01047 \par
01048                 {\cf19 return} {\cf17 null};\par
01049                \par
01050             \}\par
01051 \par
01052         \}\par
01058         {\cf17 public} BrainwavesRecord GetBrainwaveFromDBById({\cf18 int} {\cf18 id})\par
01059         \{\par
01060             {\cf19 try}\par
01061             \{\par
01062                 BrainwavesRecord ap;\par
01063 \par
01064 \par
01065                 var tap = this.GetBrainwavesFromDB();\par
01066 \par
01067                 ap = tap.Find(x => x.Id == {\cf18 id});\par
01068 \par
01069 \par
01070 \par
01071                 {\cf19 return} ap;\par
01072 \par
01073             \}\par
01074             {\cf19 catch} (Exception ex)\par
01075             \{\par
01076 \par
01077                 CommonTools.ErrorReporting(ex);\par
01078 \par
01079                 {\cf19 return} {\cf17 null};\par
01080 \par
01081             \}\par
01082 \par
01083         \}\par
01090         {\cf17 public} List<BrainwavesRecord> GetBrainwavesFromDBByGamingSessionId({\cf18 int} {\cf18 id})\par
01091         \{\par
01092             {\cf19 try}\par
01093             \{\par
01094                 List<BrainwavesRecord> ap;\par
01095 \par
01096 \par
01097                 var tap = this.GetBrainwavesFromDB();\par
01098 \par
01099                 ap = tap.FindAll(x => x.GamingSessionId == {\cf18 id});\par
01100 \par
01101                 {\cf19 return} ap;\par
01102 \par
01103 \par
01104 \par
01105             \}\par
01106             {\cf19 catch} (Exception ex)\par
01107             \{\par
01108 \par
01109                 CommonTools.ErrorReporting(ex);\par
01110                 {\cf19 return} {\cf17 null};\par
01111                  \par
01112             \}\par
01113 \par
01114         \}\par
01120         {\cf17 public} List<BrainwavesRecord> GetBrainwavesFromDBByMilisconds({\cf18 double} milsecond)\par
01121         \{\par
01122             {\cf19 try}\par
01123             \{\par
01124                 List<BrainwavesRecord> ap;\par
01125 \par
01126 \par
01127                 var tap = this.GetBrainwavesFromDB();\par
01128 \par
01129                 ap = tap.FindAll(x => x.MiliSecond== milsecond);\par
01130 \par
01131 \par
01132 \par
01133                 {\cf19 return} ap;\par
01134 \par
01135             \}\par
01136             {\cf19 catch} (Exception ex)\par
01137             \{\par
01138 \par
01139                 CommonTools.ErrorReporting(ex);\par
01140                 {\cf19 return} {\cf17 null};\par
01141 \par
01142             \}\par
01143 \par
01144         \}\par
01145 \par
01146     \}\par
01147 \}\par
}
}